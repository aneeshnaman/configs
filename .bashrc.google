export PATH=$PATH:$HOME/installs/usr/bin
export PATH=$PATH:$HOME/scripts
export PATH=$PATH:/home/build/google3/experimental/users/aneeshnaman/millwheel

export EDITOR=vim
export P4CONFIG=.p4config
export G4MULTIDIFF=1
export P4DIFF=$HOME/bin/nonstupidvimdiff.py
export P4MERGE=/home/build/public/eng/perforce/mergep4.tcl 
export P4EDITOR=$EDITOR
export GUNIT_COLOR=yes

DEBUG_FLAGS="-c dbg"
OPT_FLAGS=" -c opt"

alias bdebug="time blaze build $DEBUG_FLAGS"
alias bopt="time blaze build $OPT_FLAGS"

STREAMING_TARGETS='pipeline/flume/tests:streaming_tests dist_proc/dax_extensions/workflow/phases:millwheel_config_generator_test dist_proc/dax_extensions/workflow/utils:millwheel_gcl_writer_test dist_proc/dax_extensions/workflow/steps:millwheel_launcher_step_executor_test dist_proc/dax_extensions/workflow/steps:millwheel_pipeline_runner_step_executor_test pipeline/flume/examples/codelab/streaming:auto_complete_test'
alias teststreamingflume="bbt $STREAMING_TARGETS"
alias buildstreamingflume="bb $STREAMING_TARGETS"

complete -F _blaze::complete_build_target_wrapper -o nospace bb
complete -F _blaze::complete_build_target_wrapper -o nospace bopt
complete -F _blaze::complete_build_target_wrapper -o nospace bdebug
complete -F _blaze::complete_build_target_wrapper -o nospace fixdeps
complete -F _blaze::complete_build_target_wrapper -o nospace buildozer
complete -F _blaze::complete_build_target_wrapper -o nospace build_cleaner
complete -F _blaze::complete_test_target_wrapper -o nospace bbt
complete -F _blaze::complete_test_target_wrapper -o nospace opttest
complete -F _blaze::complete_test_target_wrapper -o nospace fasttest

function debugtest() {
  bdebugtest --test_arg=--logtostderr --test_output=errors --test_arg=--suppress_failure_output "$@" 2>&1 | tee testlog
}

function opttest() {
  bopttest --test_arg=--logtostderr --test_output=errors --test_arg=--suppress_failure_output "$@" 2>&1 | tee testlog
}

function fasttest() {
  bbt --test_arg=--logtostderr --test_output=errors --test_arg=--suppress_failure_output "$@" 2>&1 | tee testlog
}

TESTLINE="--test_output=all 2>&1 | tee testlog"

# Set title of terminal to the current working directory
export CODE_DIR=/usr/local/google/code/
alias gitcurrentbranch='git branch | grep "*" | cut -d " " -f 2'
function setTermTitle() {
  cdir=`pwd`

  # if in a g4 client or git branch, then show its name
  if [[ $cdir =~ "$CODE_DIR" ]]; then
    x=`git branch 2>/dev/null`
    if [[ $? -eq 0 ]]; then  # if in a git branch
      hd=`gitcurrentbranch`
    else
      hd=${cdir##$CODE_DIR}
      hd=${hd%%/*}
      hd=`echo $hd | sed 's/\(\<.\)\.*/\u\1/g'`
    fi
    tl=${cdir##*/}
    cdir="$hd"
    export CURRENT_G4_CLIENT=$hd
  elif [[ $cdir =~ "/google/src/cloud/aneeshnaman" ]]; then
    cdir=${cdir##/google/src/cloud/aneeshnaman/}
    cdir=${cdir%%/google3}
    export CURRENT_G4_CLIENT="$cdir/citc"
  else
    cdir="~${cdir##$HOME}"
    export CURRENT_G4_CLIENT=""
  fi

  echo -ne "\e]0;$cdir\a" > /dev/stderr
}
export PROMPT_COMMAND="setTermTitle"

alias fu='fileutil'
alias buildifier='/google/data/ro/projects/devtools/buildifier/buildifier'

# Shows all dependency paths from A to B
function allpaths() {
  blaze query --output graph "allpaths($1, $2)" | dot -Tps -o /tmp/query.ps
  gv /tmp/query.ps
}

# Shows any one dependency from A to B
function somepath() {
  blaze query --output graph "somepath($1, $2)" | dot -Tps -o /tmp/query.ps
  gv /tmp/query.ps
}


# dependency analysis tools
# Targets in util that have non-test frontend dependencies --
#blaze query 'maps/geowiki/util/... intersect allpaths((maps/geowiki/frontend/...  - kind(test, maps/geowiki/frontend/...) - maps/geowiki/frontend:unittest_util - maps/geowiki/frontend:transit_test_utils_lib), maps/geowiki/util/...)' | sort > /tmp/util-frontend-no-tests
# Non tests that depend on segment-util --
#blaze query '(maps/geowiki/backends/... - kind(test, maps/geowiki/backends/...) - maps/geowiki/backends:unittest_util - maps/geowiki/backends:test_backends) intersect allpaths(//maps/geowiki/backends/..., maps/geowiki/util:segment_util)' 

alias showcolors='seq 0 32 | while read i; do seq $i 32 255 | while read c; do printf "\033[48;5;${c}m$c%*s\033[49m    " $((10 - ${#c} )) " "; done; echo -e; done'

alias fixdeps='/home/build/devtools/blazeutils/fixdeps_main.par'

function global_presubmit() {
  if [[ $1 =~ "none" ]]
  then
    git5 export --sq --tap_options=blaze_command=build,email,detach --tap_project=all
  else
    git5 export --sq --tap_options=blaze_command=build,email,detach,rerun=$1 --tap_project=all
  fi
}

alias g5='/google/data/ro/projects/shelltoys/g5.sar'
alias lint='git5 lint'

function build_rule() {
  fullname=$(blaze query $1 2>/dev/null);
  blaze query "attr('srcs', $fullname, ${fullname//:*}:*)" 2>/dev/null
  blaze query "attr('hdrs', $fullname, ${fullname//:*}:*)" 2>/dev/null
}

function clean_cc_code() {
  echo "Running buildifier"
  buildifier -a -v
  targets=$(for file in $(git5 diff --relative --name-only 2>/dev/null); do fullname=$(blaze query $file 2>/dev/null); blaze query "attr('srcs', $fullname, ${fullname//:*}:*)" 2> /dev/null; blaze query "attr('hdrs', $fullname, ${fullname//:*}:*)" 2> /dev/null; done | sort | uniq)
  echo "Targets to fix: " $targets
  #echo "Running IWYU"
  #iwyu $targets
  echo "Running fixdeps"
  fixdeps $targets
}
export USE_CC_GENERATOR=1

# Grep history
function hgrep() {
  history | grep --color=always -- "$*" | less -R
}

function ta() {
  tmux attach -t $1
}

function mw_to_chubby() {
  lockserv cat "/ls/global/master/analysis/millwheel/$1"
}

alias mwgcl='gcl --register_objtypes="allocation,borg_job,combiner,computation,job,keyspace,millwheel_job,package,pipeline,service,sharding_method,spec,stream"'

function showdot() {
  name=$(basename $1)
  dot -Tps $1 -o "/tmp/$name.ps"
  gv "/tmp/$name.ps"
}

